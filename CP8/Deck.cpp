#include <iostream>
#include <string>
#include <algorithm>
#include <sstream>
#include <ctime>
#include <random>
#include "Deck.h"

// used constructor to build the deck when an object is created //
Deck::Deck()
{
	Card card; // created card object
	for (auto iter_suit = suit_card.begin(); iter_suit < suit_card.end(); iter_suit++)
	{
		int number_rank = 2; // variable to fill the vector and stop when the number 10 is reached

		// adds face cards to the vector
		for (auto iter_face_card = face_card.begin(); iter_face_card < face_card.end(); iter_face_card++)
		{
			card.set_suit(*iter_suit);
			card.set_rank(*iter_face_card);
			deck_of_cards.push_back(card); // insert element to the vector of type Card
		}
		while (number_rank <= 10) // fill in the rank and rest of the cards
		{
			card.set_suit(*iter_suit);
			card.set_rank(std::to_string(number_rank)); // set rank in the card class and convert it to string
			deck_of_cards.push_back(card);
			number_rank++;
		}
	}
}

// function to shuffle the deck when it is called //
void Deck::shuffle_cards()
{
	std::srand(time(0)); // used seed for random number generation
	// could not find shuffle function in chapter 6 so I  improvised used lambda expression as 
	// random engine generator used capture by reference to capture number generated by the expression's body
	std::random_shuffle(deck_of_cards.begin(), deck_of_cards.end(), [&](int i) {return std::rand() % i; });
}

// function to return dealt card //
std::string Deck::deal_card()
{
	std::string hand;
	std::stringstream ss;
	ss << *deck_of_cards.begin();
	std::getline(ss, hand);
	std::cout << *deck_of_cards.begin() << '\n';
	deck_of_cards.erase(deck_of_cards.begin());
	return hand;
}